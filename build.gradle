plugins {
    // Select Java lauguage plugin.
    id "java"

    // The version below should be the desired version of Wpilib. GradleRIO and
    // Wpilib are always released in sync as GradleRIO has embedded info about
    // all of the FIRST software tools that need to be included in a build.
    id "edu.wpi.first.GradleRIO" version "2021.3.1" // was 2021.2.1

    // This is a plugin that allows us to access git information about the version
    // of the code we are compiling and include it in the manifiest of the Jar
    // created by the gradle build. From the Jar manifiest, the code can extract
    // that information and include it in the robot trace files.
    id "org.ajoberstar.grgit" version "3.0.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// This is the class loaded and called to start robot program execution on the RoboRIO.
// The Main.java class is defined by FIRST and is the standard interface to our code.
// Inside Main.java is the reference to our top level class, "Robot".
def ROBOT_MAIN_CLASS = "Team4450.Robot21C.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(4450)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop (simulation) support.
def includeDesktopSupport = true

// Look in local maven cache first, then maven central for dependent libraries.
repositories {
	mavenLocal()
	mavenCentral()
}

// Defining project dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    //simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

    // Websocket extensions require additional configuration.
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)
}

// These next definitions (branch and hash) attempt to find extra information to add to the the manifest of
// the robot program jar file.

// Either the name of the current branch, or an empty string if no git repo is found.
def branch = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }

    return grgit.branch.current().getName()
}

// Either the short hash of the last commit or an empty string if no git repo is found.
def hash = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }
    
    return grgit.head().abbreviatedId
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
           
    manifest {
     	attributes("Branch": branch())
      	attributes("Commit": hash())
       	attributes("Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
     	attributes("User": System.getProperty("user.name"))
    }
}
